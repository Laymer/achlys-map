globalMindlyData = { "rootIdea": {"ideas":[{"note":"Ops x Size \n-------------\n  Interval","ideas":[{"note":"Short delays combined with high (10-30sec) delta gossip intervals overload memory","ideas":[],"elemtype":1,"identifier":"id1540999872_120","bgcolor":"#F91836","text":"High Frequency"},{"note":"pressure :\n\n(Size × Count) \/ Interval of updates ","ideas":[],"elemtype":1,"identifier":"id1540999872_121","bgcolor":"#4698A3","text":"Parameters"}],"elemtype":1,"identifier":"id1540999872_119","bgcolor":"#C7C4D3","text":"Best Throughput"},{"ideas":[{"ideas":[],"elemtype":1,"identifier":"id1540999872_123","bgcolor":"#0FCFFF","text":"ETS\/DETS capable"},{"ideas":[{"note":"Maximum number of boards.\nStress testing.\n","ideas":[],"elemtype":1,"identifier":"id1540999872_125","bgcolor":"#C14924","text":"Deploying"},{"note":"Attempt to extrapolate additional overhead if there is one when cluster is larger ","elemtype":1,"bgcolor":"#484570","identifier":"id1540999872_126","text":"Testing","icon":"&#x23f0","ideas":[]},{"note":"Contributors :\n\n@cmeik\n@eproxus\n@tsloughter","elemtype":1,"bgcolor":"#991A24","identifier":"id1540999872_127","text":"Ask for advice regarding configuration","icon":"&#x2754","ideas":[]},{"ideas":[],"elemtype":1,"icon":"&#x1f4dd","identifier":"id1540999872_128","bgcolor":"#601023","text":"Feedback very welcome "}],"elemtype":1,"icon":"&#x1f198","identifier":"id1540999872_124","bgcolor":"#C14924","text":"WIP"},{"ideas":[],"elemtype":1,"identifier":"id1540999872_129","bgcolor":"#2884ED","text":"Aggregates & GCs periodically"},{"ideas":[],"elemtype":1,"identifier":"id1540999872_130","bgcolor":"#82F4FF","text":"Optimized mem usage"},{"ideas":[],"elemtype":1,"identifier":"id1540999872_131","bgcolor":"#7293FF","text":"Whole new framework"}],"elemtype":1,"icon":"&#x26a0","identifier":"id1540999872_122","bgcolor":"#073DFF","text":"LK21"},{"ideas":[{"note":"Could a local storage of aggregates on SD card i.e. persistent allow for less memory and network load?","ideas":[{"note":"Not durable","elemtype":1,"bgcolor":"#F91836","identifier":"id1540999872_134","text":"Not recommended by Adam","icon":"&#x26d4","ideas":[]}],"elemtype":1,"identifier":"id1540999872_133","bgcolor":"#22747F","text":"SD card"},{"ideas":[],"elemtype":1,"identifier":"id1540999872_135","bgcolor":"#4698A3","text":""},{"note":"Hypothesis :\n\nCould a local ets storage of aggregates instead of process heap storage improve memory usage while preserving sufficient resilience?\n\nLess Lasp updates but also les traffic and process memory usage.","ideas":[{"note":"aggregate temperatures in ETS table with erlang:monotonic_time(),temp k\/v pairs ","elemtype":1,"bgcolor":"#04566B","identifier":"id1540999872_137","text":"Pmod_nav","icon":"&#x2753","ideas":[]}],"elemtype":1,"identifier":"id1540999872_136","bgcolor":"#04566B","text":"ETS"}],"elemtype":1,"identifier":"id1540999872_132","bgcolor":"#52D6EA","text":"Aggregations"},{"ideas":[{"note":"@ferd's application for inspection, mostly recon:alloc","elemtype":1,"bgcolor":"#7293FF","identifier":"id1540999872_139","text":"Recon","icon":"&#x1f419","ideas":[{"note":"ratio has improved","ideas":[],"elemtype":1,"identifier":"id1540999872_140","bgcolor":"#2884ED","text":"sbcs_to_mbcs"},{"note":"acceptor_pool noticed in fragmented procs ","ideas":[],"elemtype":1,"identifier":"id1540999872_141","bgcolor":"#0FCFFF","text":"fragmentation"},{"note":"Indicates leaking binaries are close to none","ideas":[],"elemtype":1,"identifier":"id1540999872_142","bgcolor":"#82F4FF","text":"bin_leak"},{"note":"Points out high unused allocated memory \n\n:memory(unused,max)","elemtype":1,"bgcolor":"#7293FF","identifier":"id1540999872_143","text":"recon_alloc","icon":"&#x1f6a9","ideas":[]}]},{"note":"available on OTP repo, show detailed specs and implementation of allocators setup","ideas":[],"elemtype":1,"identifier":"id1540999872_144","bgcolor":"#4698A3","text":"C implementations"},{"note":"mseg_alloc process :\n\ngrowth stages = 10\nlmbcs = 1024*1024\nsmbcs = 1024 \n\nSizes of multiblock carriers allocated through mseg_allocare decided based on the following parameters:\n\nThe values of the largest multiblock carrier size (lmbcs)\n\nThe smallest multiblock carrier size (smbcs)\n\nThe multiblock carrier growth stages (mbcgs)\n\nIf nc is the current number of multiblock carriers (the main multiblock carrier excluded) managed by an allocator, the size of the next mseg_alloc multiblock carrier allocated by this allocator is roughly smbcs+nc*(lmbcs-smbcs)\/mbcgs when nc <= mbcgs, and lmbcs when nc > mbcgs. If the value of parameter sbct is larger than the value of parameter lmbcs, the allocator may have to create multiblock carriers that are larger than the value of parameter lmbcs, though. Singleblock carriers allocated through mseg_alloc are sized to whole pages.\n\nlet nc <= mbcgs :\n \nnext mbc size = smbcs + nc × (lmbcs - smbcs)\n\n                              = lmbcs otherwise\n\n\n\n12 cores -> 13 eheap allocs\n1 core -> 2 allocs\n---> SMP enabled devices \n\n","elemtype":1,"bgcolor":"#1D9B7E","identifier":"id1540999872_145","text":"Computers vs GRiSPs","icon":"&#x26a0","ideas":[]},{"note":"a custom erts_alloc config file can be generated based on learning from scenario runs. It can possibly optimize alloc configuration for more specific applications.","ideas":[],"elemtype":1,"identifier":"id1540999872_146","bgcolor":"#2B8466","text":"erts_alloc_config"}],"elemtype":1,"identifier":"id1540999872_138","bgcolor":"#22B59A","text":"erts_alloc"},{"ideas":[{"note":"But if pressure was proportional would they crash?","elemtype":1,"bgcolor":"#2B8466","identifier":"id1540999872_148","text":"PCs have enough memory to sustain the same apps","icon":"&#x2753","ideas":[]}],"elemtype":2,"image":"id1540999872_147_mini.png","identifier":"id1540999872_147","bigImage":"2CBF5FC1FE8CE5D8C77AA4A33810C0DA2AC59AD7.png"},{"ideas":[{"ideas":[],"elemtype":3,"url":"https:\/\/github.com\/lasp-lang\/partisan","identifier":"id1540999872_151","image":"id1540999872_151_mini.png"}],"elemtype":1,"identifier":"id1540999872_149","bgcolor":"#BF3134","text":"Partisan"},{"ideas":[{"ideas":[],"elemtype":1,"icon":"&#x2795","identifier":"id1540999872_154","bgcolor":"#484570","text":"Carefully manage state growth"},{"note":"Implies GCs before hibernation and on wakeup. Potential gain might be for processes with low relative message frequency.","ideas":[],"elemtype":1,"identifier":"id1540999872_155","bgcolor":"#68638C","text":"Hibernation"}],"elemtype":1,"identifier":"id1540999872_152","bgcolor":"#C7C4D3","text":"Behavior gen_server"},{"ideas":[{"ideas":[],"elemtype":1,"icon":"&#x1f480","identifier":"id1541000464_179","bgcolor":"#083859","text":"Nodes die anyway for same reasons"},{"ideas":[],"elemtype":1,"identifier":"id1541000464_180","bgcolor":"#C14924","text":""},{"note":"up to 2MB collected : increases lifetime","ideas":[],"elemtype":1,"identifier":"id1541000464_181","bgcolor":"#601023","text":"Major on all PIDs"}],"elemtype":1,"identifier":"id1541000464_178","bgcolor":"#991A24","text":"Manual GC"},{"ideas":[{"ideas":[],"elemtype":1,"identifier":"id1540999872_157","bgcolor":"#C14924","text":""},{"note":"pmod_nav ","ideas":[{"note":"Timed GC's included","ideas":[],"elemtype":1,"identifier":"id1540999872_159","bgcolor":"#DD6430","text":"GC"},{"note":"Easily maintained with ETS and monotonic_time() for each table","elemtype":1,"bgcolor":"#C14924","identifier":"id1540999872_160","text":"Sliding window","icon":"&#x23f0","ideas":[]},{"note":"update crdt periodically or on-demand only?","elemtype":1,"bgcolor":"#991A24","identifier":"id1540999872_161","text":"Lasp","icon":"&#x26a0","ideas":[]},{"note":"storing measures in local ETS tables and performing periodical updates of means.\n{erlang :monotonic_time() , [Temp]} tuples","elemtype":1,"bgcolor":"#991A24","identifier":"id1540999872_162","text":"ETS","icon":"&#x1f4c2","ideas":[{"note":"tasks could trigger propagation based on table content","elemtype":1,"bgcolor":"#991A24","identifier":"id1540999872_163","text":"Intermediate data","icon":"&#x1f44d","ideas":[]},{"ideas":[],"elemtype":1,"identifier":"id1540999872_164","bgcolor":"#601023","text":"Task storage"}]}],"elemtype":1,"identifier":"id1540999872_158","bgcolor":"#601023","text":"Temperatures"}],"elemtype":1,"icon":"&#x1f4dd","identifier":"id1540999872_156","bgcolor":"#AD7C7C","text":"Experiments"},{"ideas":[{"ideas":[{"note":"1---2---3\n\nNode 2 crashes first even if more traffic generated at node 3 => relays could require additional backpressure\n\ndelta interval for Lasp set to 10,20 and 30 seconds \n\nSimilar traffic on all nodes \n\ncycle : 1000 iterations\nadd 100bits\nwait 500ms\nrmv 100bits\nwait 500ms \n\nNo memory improvement","ideas":[],"elemtype":1,"identifier":"id1540999872_167","bgcolor":"#1D9B7E","text":"3-nodes delta intervals increased"},{"note":"1---2---3\n\nNode 2 crashes first even if more traffic generated at node 3 => relays could require additional backpressure\n\nMax throughput : node3\n\ncycle : 1000 iterations\nadd 200bits\nwait 500ms\nrmv 200bits\nwait 500ms ","ideas":[],"elemtype":1,"identifier":"id1540999872_168","bgcolor":"#2B8466","text":"3  nodes Lasp cluster"}],"elemtype":1,"identifier":"id1540999872_166","bgcolor":"#22B59A","text":"DONE"},{"ideas":[{"note":"Determine maximum traffic enabling long lived nodes ","ideas":[],"elemtype":1,"identifier":"id1540999872_170","bgcolor":"#991A24","text":"Find stable configuration"},{"ideas":[],"elemtype":1,"identifier":"id1540999872_171","bgcolor":"#C14924","text":""},{"note":"Same operations except only 1 in N iterations propagate data in Lasp","ideas":[],"elemtype":1,"identifier":"id1540999872_172","bgcolor":"#601023","text":"Increased local aggregation"}],"elemtype":1,"identifier":"id1540999872_169","bgcolor":"#991A24","text":"TODO"}],"elemtype":1,"identifier":"id1540999872_165","bgcolor":"#04566B","text":"Tests"},{"ideas":[{"ideas":[{"note":"Packet config :\n\nLD = Low Delay\nLS = Low Size\nLC = Low Count\n\n1. LD and !LS and !LC\n2. LD and LS and !LC\n3. all\n4. !LD and LS and !LC\n5. LD and !LS and !LC ","ideas":[],"elemtype":1,"identifier":"id1540999872_175","bgcolor":"#22747F","text":"Fine-tune Lasp updates params"}],"elemtype":1,"identifier":"id1540999872_174","bgcolor":"#04566B","text":"intervals"}],"elemtype":1,"identifier":"id1540999872_173","bgcolor":"#04566B","text":"Delta based mode"}],"elemtype":1,"icon":"&#x1f170","identifier":"id1540999872_118","bgcolor":"#BF3134","text":"Achlys"},
"mode": "embedded" };