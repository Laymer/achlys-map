globalMindlyData = { "rootIdea": {"ideas":[{"ideas":[{"note":"Could a local storage of aggregates on SD card i.e. persistent allow for less memory and network load?","ideas":[{"note":"Not durable","elemtype":1,"bgcolor":"#F91836","identifier":"id1540999872_134","text":"Not recommended by Adam Lindberg","icon":"&#x26d4","ideas":[]}],"elemtype":1,"identifier":"id1540999872_133","bgcolor":"#22747F","text":"SD card"},{"note":"Local ETS storage is used to store raw measurements of IoT sensor data. Once the aggregation triggers are reached, the mean of the values is computed and stored in the distributed database.","ideas":[{"note":"stpre values from Pmod modules in ETS table with erlang:monotonic_time(),val k\/v pairs\n\n ","elemtype":1,"bgcolor":"#04566B","identifier":"id1540999872_137","text":"Pmod modules","icon":"&#x2705","ideas":[]}],"elemtype":1,"identifier":"id1540999872_136","bgcolor":"#04566B","text":"ETS"}],"elemtype":1,"identifier":"id1540999872_132","bgcolor":"#52D6EA","text":"Aggregations"},{"ideas":[{"note":"achlys:venom(module)\n\n-> Run data collection using given Pmod worker module. Currently available modules are :\n\n- achlys_pmod_nav_worker\n- achlys_pmod_als_worker","ideas":[],"elemtype":1,"identifier":"id1544463607_4","bgcolor":"#82F4FF","text":"venom\/1"},{"note":"achlys:clusterize()\n\n-> Attempt to form a cluster of Achlys nodes by searching for neighboring GRiSP boards.","ideas":[],"elemtype":1,"identifier":"id1544463818_5","bgcolor":"#0FCFFF","text":"clusterize\/0"},{"note":"achlys:bane(Variable)\n\n-> Read the currently visible aggregates of the given variable from the distributed storage.\n\ne.g. :\n\nachlys:bane(temperature).","ideas":[],"elemtype":1,"identifier":"id1544463880_6","bgcolor":"#2884ED","text":"bane\/1"},{"note":"achlys:bite(Task).\n\n-> Add the given task in the replicated task set. Tasks must be maps of the form :\n\n#{name => TaskName::atom(),\ntargets => [node()] | all,\nfunction => function()}","ideas":[],"elemtype":1,"identifier":"id1544463965_7","bgcolor":"#073DFF","text":"bite\/1"},{"note":"achlys:get_all_tasks()\n\n-> Shows all visible tasks in the replicated task set.","ideas":[],"elemtype":1,"identifier":"id1544464084_8","bgcolor":"#29678E","text":"get_all_tasks\/0"}],"elemtype":1,"identifier":"id1544463578_3","bgcolor":"#2884ED","text":"API"},{"ideas":[{"note":"@ferd’s application for inspection, mostly recon:alloc","elemtype":1,"bgcolor":"#7293FF","identifier":"id1540999872_139","text":"Recon","icon":"&#x1f419","ideas":[{"note":"ratio has improved","ideas":[],"elemtype":1,"identifier":"id1540999872_140","bgcolor":"#2884ED","text":"sbcs_to_mbcs"},{"note":"acceptor_pool noticed in fragmented procs ","ideas":[],"elemtype":1,"identifier":"id1540999872_141","bgcolor":"#0FCFFF","text":"fragmentation"},{"note":"Indicates leaking binaries are close to none","ideas":[],"elemtype":1,"identifier":"id1540999872_142","bgcolor":"#82F4FF","text":"bin_leak"},{"note":"Points out high unused allocated memory \n\n:memory(unused,max)","elemtype":1,"bgcolor":"#7293FF","identifier":"id1540999872_143","text":"recon_alloc","icon":"&#x1f6a9","ideas":[]}]},{"note":"available on OTP repo, show detailed specs and implementation of allocators setup","ideas":[],"elemtype":1,"identifier":"id1540999872_144","bgcolor":"#4698A3","text":"C implementations"},{"note":"mseg_alloc process :\n\ngrowth stages = 10\nlmbcs = 1024*1024\nsmbcs = 1024 \n\nSizes of multiblock carriers allocated through mseg_allocare decided based on the following parameters:\n\nThe values of the largest multiblock carrier size (lmbcs)\n\nThe smallest multiblock carrier size (smbcs)\n\nThe multiblock carrier growth stages (mbcgs)\n\nIf nc is the current number of multiblock carriers (the main multiblock carrier excluded) managed by an allocator, the size of the next mseg_alloc multiblock carrier allocated by this allocator is roughly smbcs+nc*(lmbcs-smbcs)\/mbcgs when nc <= mbcgs, and lmbcs when nc > mbcgs. If the value of parameter sbct is larger than the value of parameter lmbcs, the allocator may have to create multiblock carriers that are larger than the value of parameter lmbcs, though. Singleblock carriers allocated through mseg_alloc are sized to whole pages.\n\nlet nc <= mbcgs :\n \nnext mbc size = smbcs + nc × (lmbcs - smbcs)\n\n                              = lmbcs otherwise\n\n\n\n12 cores -> 13 eheap allocators\n1 core -> 2 allocators\n—> SMP enabled devices \n\n","elemtype":1,"bgcolor":"#1D9B7E","identifier":"id1540999872_145","text":"Computers vs GRiSPs","icon":"&#x26a0","ideas":[]},{"note":"a custom erts_alloc config file can be generated based on learning from scenario runs. It can possibly optimize alloc configuration for more specific applications.","ideas":[],"elemtype":1,"identifier":"id1540999872_146","bgcolor":"#2B8466","text":"erts_alloc_config"}],"elemtype":1,"identifier":"id1540999872_138","bgcolor":"#22B59A","text":"erts_alloc"},{"ideas":[{"note":"But if pressure was proportional would they crash?","elemtype":1,"bgcolor":"#2B8466","identifier":"id1540999872_148","text":"PCs have enough memory to sustain the same apps","icon":"&#x2753","ideas":[]}],"elemtype":2,"image":"id1540999872_147_mini.png","identifier":"id1540999872_147","bigImage":"2CBF5FC1FE8CE5D8C77AA4A33810C0DA2AC59AD7.png"},{"ideas":[{"ideas":[],"elemtype":3,"url":"https:\/\/github.com\/lasp-lang\/partisan","identifier":"id1540999872_151","image":"id1540999872_151_mini.png"},{"ideas":[],"elemtype":1,"identifier":"id1544462817_2","bgcolor":"#BF3134","text":"Plumtree"},{"ideas":[],"elemtype":1,"identifier":"id1544462811_1","bgcolor":"#BF3134","text":"HyParView"}],"elemtype":1,"identifier":"id1540999872_149","bgcolor":"#BF3134","text":"Partisan"},{"ideas":[{"ideas":[{"note":"6-node cluster with crashes and incomplete connectivity.","ideas":[],"elemtype":1,"identifier":"id1540999872_168","bgcolor":"#2B8466","text":"6  nodes Lasp cluster"}],"elemtype":1,"identifier":"id1540999872_166","bgcolor":"#22B59A","text":"DONE"},{"ideas":[{"note":"Once data has been propagated in Lasp, flush the ETS local storage in order to keep unnecessary measurements. \n\n- Sliding window mechanism?","ideas":[],"elemtype":1,"identifier":"id1540999872_172","bgcolor":"#601023","text":"Flush local aggregation"}],"elemtype":1,"identifier":"id1540999872_169","bgcolor":"#991A24","text":"TODO"}],"elemtype":1,"identifier":"id1540999872_165","bgcolor":"#04566B","text":"Tests"},{"ideas":[{"ideas":[{"note":"Packet config :\n\nLD = Low Delay\nLS = Low Size\nLC = Low Count\n\n1. LD and !LS and !LC\n2. LD and LS and !LC\n3. all\n4. !LD and LS and !LC\n5. LD and !LS and !LC ","ideas":[],"elemtype":1,"identifier":"id1540999872_175","bgcolor":"#22747F","text":"Fine-tune Lasp updates params"}],"elemtype":1,"identifier":"id1540999872_174","bgcolor":"#04566B","text":"intervals"}],"elemtype":1,"identifier":"id1540999872_173","bgcolor":"#04566B","text":"Delta based mode"}],"elemtype":1,"icon":"&#x1f170","identifier":"id1540999872_118","bgcolor":"#BF3134","text":"Achlys"},
"mode": "embedded" };